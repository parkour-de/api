{
    "swagger": "2.0",
    "info": {
        "description": "API to get data about DPV",
        "title": "DPV API",
        "termsOfService": "http://dpfv.de/",
        "contact": {
            "name": "API Support",
            "url": "http://dpfv.de/",
            "email": "support@dpfv.de"
        },
        "license": {
            "name": "MIT License",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/facebook": {
            "get": {
                "description": "Request an OAuth token from https://www.facebook.com/v17.0/dialog/oauth, then call this endpoint\nusing Authorization: facebook mySuperSecretToken as a header. This endpoint will then make a debug\ncall to Facebook Graph API to extract a unique ID that can be attached to a user.",
                "tags": [
                    "authentication"
                ],
                "summary": "Takes the authorization header from the browser and generates an access token for a user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/locations": {
            "put": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be created",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        },
        "/api/locations/{id}": {
            "get": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        },
        "/api/trainings": {
            "get": {
                "description": "Returns a list of trainings.",
                "tags": [
                    "trainings"
                ],
                "summary": "Get a list of trainings",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 0,
                        "description": "Day of the week (1-7) or 0 to ignore",
                        "name": "weekday",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Hamburg",
                        "description": "City name",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "user/135",
                        "description": "Return only trainings that match provided Organiser ID",
                        "name": "organiser",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "location/246",
                        "description": "Return only trainings that match provided Location ID",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "example": "cycles,photos,comments,location,organisers",
                        "description": "comma-separated list of sections to include. Choose from: cycles,photos,comments,location,location_photos,location_comments,organisers,organiser_photos,organiser_comments",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.TrainingDTO"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be created",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        },
        "/api/trainings/{id}": {
            "get": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "description": "Returns a list of users.",
                "tags": [
                    "users"
                ],
                "summary": "Get a list of users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.User"
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be updated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "description": "item to be created",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{id}": {
            "get": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "crud"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the item to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/crud.IdResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "crud.IdResponse": {
            "type": "object"
        },
        "domain.Comment": {
            "description": "Comments like a guestbook, news feed or blog",
            "type": "object",
            "properties": {
                "author": {
                    "type": "string",
                    "example": "user/123"
                },
                "created": {
                    "description": "RFC 3339 date",
                    "type": "string"
                },
                "text": {
                    "type": "string",
                    "example": "I have something to say here..."
                },
                "title": {
                    "type": "string",
                    "example": "Hey there"
                }
            }
        },
        "domain.Cycle": {
            "description": "Represent recurring events",
            "type": "object",
            "properties": {
                "begin": {
                    "description": "seconds",
                    "type": "integer"
                },
                "duration": {
                    "description": "seconds",
                    "type": "integer"
                },
                "enddate": {
                    "description": "RFC 3339 date of when the cycle does not continue",
                    "type": "string"
                },
                "interval": {
                    "type": "integer"
                },
                "locationId": {
                    "type": "string",
                    "example": "location/123"
                },
                "monthday": {
                    "type": "integer"
                },
                "startdate": {
                    "description": "RFC 3339 date of the first possible day in a cycle",
                    "type": "string"
                },
                "weekday": {
                    "type": "integer"
                }
            }
        },
        "domain.Description": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string",
                    "example": "Something to describe"
                },
                "title": {
                    "type": "string",
                    "example": "My Item"
                },
                "translated": {
                    "description": "whether this has automatically been translated from another language",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "domain.Descriptions": {
            "description": "A map of language code to title and text",
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/domain.Description"
            }
        },
        "domain.Location": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "location/123"
                },
                "city": {
                    "type": "string",
                    "example": "Hamburg"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Comment"
                    }
                },
                "descriptions": {
                    "$ref": "#/definitions/domain.Descriptions"
                },
                "information": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "lat": {
                    "type": "number",
                    "example": 53.55
                },
                "lng": {
                    "type": "number",
                    "example": 9.99
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Photo"
                    }
                },
                "type": {
                    "description": "spot, gym, parkour-gym, office, public-transport",
                    "type": "string",
                    "example": "spot"
                }
            }
        },
        "domain.Photo": {
            "description": "Identify size and location of an image",
            "type": "object",
            "properties": {
                "h": {
                    "type": "integer",
                    "example": 480
                },
                "src": {
                    "type": "string",
                    "example": "image.jpg"
                },
                "w": {
                    "type": "integer",
                    "example": 640
                }
            }
        },
        "domain.TrainingDTO": {
            "description": "Enriches Training with some other related nodes such as Location or User",
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "training/123"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Comment"
                    }
                },
                "cycles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Cycle"
                    }
                },
                "descriptions": {
                    "$ref": "#/definitions/domain.Descriptions"
                },
                "information": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "location": {
                    "$ref": "#/definitions/domain.Location"
                },
                "locationId": {
                    "type": "string",
                    "example": "location/123"
                },
                "organiserIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "user/123"
                    ]
                },
                "organisers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.User"
                    }
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Photo"
                    }
                },
                "type": {
                    "description": "parkour-training, parkour-jam, meeting, show, competition, slackline",
                    "type": "string",
                    "example": "training"
                }
            }
        },
        "domain.User": {
            "description": "Stores information about a user",
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string",
                    "example": "user/123"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Comment"
                    }
                },
                "descriptions": {
                    "$ref": "#/definitions/domain.Descriptions"
                },
                "information": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Photo"
                    }
                },
                "type": {
                    "description": "person, team, group, association, company",
                    "type": "string",
                    "example": "person"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}